import{a as useTemplteStore,e as useStateRowConversionTree}from"./useRowConversionTree-f86c56ba.js";const templateStore=useTemplteStore();function useConstructorAllData(a,e,t){templateStore.setThisTemplate(e);let r=useDataListAddName(a);const s=useArrConversionMapObj(e);r=useForEachDataAssignTemplateMap(r,s);const o=r,n=useCreateColumns(r);return{useDataList:o,useColumns:n}}function useDataListAddName(a){const e=Object.keys(a),t=Object.values(a);return e.map((s,o)=>{const n={itemName:e[o],itemTitle:"名称"};return Object.assign(n,t[o])})}function useArrConversionMapObj(a,e){if(!e)var e=new Map;return a.forEach(t=>{e[t.name]||(e[t.name]=t),t.children&&t.children.length>0&&useArrConversionMapObj(t.children,e)}),templateStore.setTemplateMap(e),e}function useDataAssignTemplateMap(item,TemplateMap,path=[],itemName){const rowState=templateStore.thisTableDataState[itemName];let isHandle=!0;for(let key in item){const currentPath=[...path,key];if(TemplateMap[key])if(typeof item[key]=="object"&&!Array.isArray(item[key]))item[key]=Object.assign(item[key],TemplateMap[key]),useDataAssignTemplateMap(item[key],TemplateMap,currentPath,itemName);else{const resPath=currentPath.join("."),currentState="rowState."+resPath,Val=item[key];item[key]={value:Val,...TemplateMap[key]},item[key].value=Val,item[key].placeholder=TemplateMap[key].value||"";try{const stateData=eval(currentState);item[key].state=stateData}catch(a){if(isHandle&&rowState){const e=useStateRowConversionTree(rowState);templateStore.rowStateTree[itemName]=e,isHandle=!1}}}}}function useForEachDataAssignTemplateMap(a,e){const t=JSON.parse(JSON.stringify(a)),r=JSON.parse(JSON.stringify(e));return t.forEach(s=>{const o=s.itemName;useDataAssignTemplateMap(s,r,[],o)}),t}function useDataRowAssignTemplateArr(item,Template,path=[],itemName,itemTemplateArr=[]){const rowState=templateStore.thisTableDataState[itemName];let isHandle=!0;for(let key in item){const currentPath=[...path,key],templateItem=itemTemplateArr.find(a=>a.name===key);if(templateItem)if(typeof item[key]=="object"&&!Array.isArray(item[key]))item[key]=Object.assign(item[key],templateItem),useDataRowAssignTemplateArr(item[key],Template,currentPath,itemName,templateItem.children);else{const resPath=currentPath.join("."),currentState="rowState."+resPath,Val=item[key];item[key]={value:Val,...templateItem},item[key].value=Val,item[key].placeholder=templateItem.value||"";try{const stateData=eval(currentState);item[key].state=stateData}catch(a){if(isHandle&&rowState){const e=useStateRowConversionTree(rowState);templateStore.rowStateTree[itemName]=e,isHandle=!1}}}}}function useDeepGetCloumnsKey(a,e,t){if(a.length===0){const s={prop:"itemName",label:e.itemTitle,minWidth:120};t.itemName=t.itemTitle=!0,a.push(s)}function r(s,o=[]){for(let n in s){if(t[n])continue;const i=[...o,n];if(typeof s[n]=="object"&&!Array.isArray(s[n])){if(s[n].value){const l={prop:i.join(".")+".value",label:s[n].display,minWidth:120};a.push(l),t[n]=!0}r(s[n],i)}else t[n]=!0}}r(e)}function useCreateColumns(a){const e={},t=[];return a.forEach(r=>{if(r.itemName)return useDeepGetCloumnsKey(t,r,e)}),t.push({label:"操作",fixed:"right",width:180,slot:"operation"}),t}export{useArrConversionMapObj as a,useDataRowAssignTemplateArr as b,useConstructorAllData as u};
